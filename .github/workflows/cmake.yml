name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Get gl4es
      uses: actions/checkout@v2
      with:
        repository: 'ptitSeb/gl4es'
        path: 'gl4es'

    - name: Build gl4es
      run: |
        cp -rf Android_gl4es.mk gl4es/Android.mk
        cd gl4es
        $ANDROID_NDK_HOME/ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=./Android.mk


    - name: Get Qt5
      run: |
            git clone https://code.qt.io/qt/qt5.git
            cd qt5
            git checkout v5.13.1
            git submodule update --init --recursive

    - name: Get Qt5 android patches
      run: |
            mkdir qt5patches && cd qt5patches
            git init
            git remote add -f origin https://github.com/Martchus/PKGBUILDs
            git config core.sparsecheckout true
            echo qt5/ >> .git/info/sparse-checkout
            git pull origin master
    # todo: multiarch build
    - name: Patch & build Qt5
      run: |
            mkdir qt5out
            cd qt5/qtbase
            patch -Np1 -i "../../qt5patches/qt5/android-aarch64/0001-Fix-clang-libc-build-under-Android.patch"
            patch -Np1 -i "../../qt5patches/qt5/android-aarch64/0003-Support-pkg-config-under-Android.patch"
            patch -Np1 -i "../../qt5patches/qt5/android-aarch64/0004-Use-pkg-config-to-find-libjpeg.patch"
            cd ../qtlocation
            patch -Np1 -i "../../qt5patches/qt5/android-aarch64/0001-Disable-mapboxgl.patch"
            cd ..
            mkdir build-qt && cd build-qt
            gl4es_BINARY_DIR=$GITHUB_WORKSPACE/gl4es/libs/arm64-v8a ../configure -confirm_license -opensource -xplatform android-clang -prefix $GITHUB_WORKSPACE/qt5out -disable-rpath -nomake tests -nomake examples -android-ndk $ANDROID_NDK_HOME -android-sdk $ANDROID_SDK_ROOT -android-arch arm64-v8a -android-ndk-platform 28 -no-warnings-are-errors -skip qtserialport -no-warnings-are-errors -optimized-qmake -opengl desktop -I$ANDROID_NDK_HOME/sysroot/usr/include
            make -j$(nproc)
            sudo make install
            find $GITHUB_WORKSPACE/qt -name "*.cmake"
            exit 1
    - name: Show Qt5 log
      if: failure()
      run: cat qt5/build-qt/config.log
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: export PREF=/usr/lib/x86_64-linux-gnu/cmake && cmake -B ${{github.workspace}}/build -DQt5_DIR=$PREF/Qt5 -DQt5Core_DIR=$PREF/Qt5Core -DQt5Widgets_DIR=$PREF/Qt5Widgets -DQt5Gui_DIR=$PREF/Qt5Gui -DQt5OpenGL_DIR=$PREF/Qt5OpenGL -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=$ANDROID_SDK_ROOT/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-28
      env: 
        ANDROID_SDK: $ANDROID_SDK_ROOT
        ANDROID_NDK: $ANDROID_NDK_HOME

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#    - name: Test
#      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: HLMV_apk.apk
        path: ${{github.workspace}}/build
